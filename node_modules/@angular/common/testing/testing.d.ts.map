{"version":3,"file":"testing.d.ts","sources":["testing.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license Angular v11.2.14\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { LocationChangeListener } from '@angular/common';\nimport { LocationStrategy } from '@angular/common';\nimport { PlatformLocation } from '@angular/common';\nimport { SubscriptionLike } from 'rxjs';\n\n/**\n * Provider for mock platform location config\n *\n * @publicApi\n */\nexport declare const MOCK_PLATFORM_LOCATION_CONFIG: InjectionToken<MockPlatformLocationConfig>;\n\n/**\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\n * location events.\n *\n * @publicApi\n */\nexport declare class MockLocationStrategy extends LocationStrategy {\n    internalBaseHref: string;\n    internalPath: string;\n    internalTitle: string;\n    urlChanges: string[];\n    private stateChanges;\n    constructor();\n    simulatePopState(url: string): void;\n    path(includeHash?: boolean): string;\n    prepareExternalUrl(internal: string): string;\n    pushState(ctx: any, title: string, path: string, query: string): void;\n    replaceState(ctx: any, title: string, path: string, query: string): void;\n    onPopState(fn: (value: any) => void): void;\n    getBaseHref(): string;\n    back(): void;\n    forward(): void;\n    getState(): unknown;\n}\n\n/**\n * Mock implementation of URL state.\n *\n * @publicApi\n */\nexport declare class MockPlatformLocation implements PlatformLocation {\n    private baseHref;\n    private hashUpdate;\n    private urlChanges;\n    constructor(config?: MockPlatformLocationConfig);\n    get hostname(): string;\n    get protocol(): string;\n    get port(): string;\n    get pathname(): string;\n    get search(): string;\n    get hash(): string;\n    get state(): unknown;\n    getBaseHrefFromDOM(): string;\n    onPopState(fn: LocationChangeListener): void;\n    onHashChange(fn: LocationChangeListener): void;\n    get href(): string;\n    get url(): string;\n    private parseChanges;\n    replaceState(state: any, title: string, newUrl: string): void;\n    pushState(state: any, title: string, newUrl: string): void;\n    forward(): void;\n    back(): void;\n    getState(): unknown;\n}\n\n/**\n * Mock platform location config\n *\n * @publicApi\n */\nexport declare interface MockPlatformLocationConfig {\n    startUrl?: string;\n    appBaseHref?: string;\n}\n\n/**\n * A spy for {@link Location} that allows tests to fire simulated location events.\n *\n * @publicApi\n */\nexport declare class SpyLocation implements Location {\n    urlChanges: string[];\n    private _history;\n    private _historyIndex;\n    setInitialPath(url: string): void;\n    setBaseHref(url: string): void;\n    path(): string;\n    getState(): unknown;\n    isCurrentPathEqualTo(path: string, query?: string): boolean;\n    simulateUrlPop(pathname: string): void;\n    simulateHashChange(pathname: string): void;\n    prepareExternalUrl(url: string): string;\n    go(path: string, query?: string, state?: any): void;\n    replaceState(path: string, query?: string, state?: any): void;\n    forward(): void;\n    back(): void;\n    onUrlChange(fn: (url: string, state: unknown) => void): void;\n    subscribe(onNext: (value: any) => void, onThrow?: ((error: any) => void) | null, onReturn?: (() => void) | null): SubscriptionLike;\n    normalize(url: string): string;\n}\n\nexport { }\n"]}